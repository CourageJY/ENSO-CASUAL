import pathlib

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

print(pd.__version__)

dataset_path = keras.utils.get_file("auto-mpg.data", "http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
print(dataset_path)

column_names = ['MPG','Cylinders','Displacement','Horsepower','Weight', #数据集中MPG是英里每加仑的意思，衡量燃油效率
                'Acceleration', 'Model Year', 'Origin']
raw_dataset = pd.read_csv(dataset_path, names=column_names, #转成pd格式
                      na_values = "?", comment='\t',
                      sep=" ", skipinitialspace=True)

dataset = raw_dataset.copy()#拷贝
print(dataset.tail())

print(dataset.isna().sum())#计算出各列值为na的总数

dataset = dataset.dropna()#去除有值为na的列

origin = dataset.pop('Origin')#取出origin列，原pd中不再包含origin列

#加入USA、Europe、Japan列
dataset['USA'] = (origin == 1)*1.0#从origin中进行构造，值为0则0，值为1则1
dataset['Europe'] = (origin == 2)*1.0
dataset['Japan'] = (origin == 3)*1.0
print(dataset.tail())

train_dataset = dataset.sample(frac=0.8,random_state=0)#取样函数
test_dataset = dataset.drop(train_dataset.index)#drop：取出pd的后续部分

sns.pairplot(train_dataset[["MPG", "Cylinders", "Displacement", "Weight"]], diag_kind="kde")

train_stats = train_dataset.describe()#获取数据集的相关描述，如：总数、均值、中位数、最大值、最小值等
train_stats.pop("MPG")
train_stats = train_stats.transpose()#pd转置
print(train_stats)

train_labels = train_dataset.pop('MPG')
test_labels = test_dataset.pop('MPG')

def norm(x):#标准化函数
  return (x - train_stats['mean']) / train_stats['std']#pd中的减法、除法操作
normed_train_data = norm(train_dataset)
normed_test_data = norm(test_dataset)

def build_model():#建立神经网络模型
  model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[len(train_dataset.keys())]),#激活函数选择relu
    layers.Dense(64, activation='relu'),
    layers.Dense(1)
  ])

  optimizer = tf.keras.optimizers.RMSprop(0.001)#优化器

  model.compile(loss='mse',#编译
                optimizer=optimizer,
                metrics=['mae', 'mse'])
  return model

model = build_model()

#模型简述
model.summary()

example_batch = normed_train_data[:10]
example_result = model.predict(example_batch)
print(example_result)#训练前

# 通过为每个完成的时期打印一个点来显示训练进度
class PrintDot(keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs):
    if epoch % 100 == 0: print('')
    print('.', end='')

EPOCHS = 1000

history = model.fit(#正式训练
  normed_train_data, train_labels,
  epochs=EPOCHS, validation_split = 0.2, verbose=0,#?
  callbacks=[PrintDot()])

hist = pd.DataFrame(history.history)
print(hist.tail())
hist['epoch'] = history.epoch
print(hist.tail())

def plot_history(history):#绘制出训练效果
  hist = pd.DataFrame(history.history)
  hist['epoch'] = history.epoch

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Abs Error [MPG]')
  plt.plot(hist['epoch'], hist['mae'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mae'],
           label = 'Val Error')
  plt.ylim([0,5])#?
  plt.legend()#?

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Square Error [$MPG^2$]')
  plt.plot(hist['epoch'], hist['mse'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mse'],
           label = 'Val Error')
  plt.ylim([0,20])
  plt.legend()
  plt.show()


plot_history(history)

print("end")

#样本太少，为了防止过拟合需要设置较少的层数，并及时停止

model = build_model()

# patience 值用来检查改进 epochs 的数量
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

history = model.fit(normed_train_data, train_labels, epochs=EPOCHS,
                    validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])

plot_history(history)

loss, mae, mse = model.evaluate(normed_test_data, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} MPG".format(mae))

test_predictions = model.predict(normed_test_data).flatten()

plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [MPG]')
plt.ylabel('Predictions [MPG]')
plt.axis('equal')
plt.axis('square')
plt.xlim([0,plt.xlim()[1]])
plt.ylim([0,plt.ylim()[1]])
_ = plt.plot([-100, 100], [-100, 100])

error = test_predictions - test_labels
plt.hist(error, bins = 25)
plt.xlabel("Prediction Error [MPG]")
_ = plt.ylabel("Count")

print("end")